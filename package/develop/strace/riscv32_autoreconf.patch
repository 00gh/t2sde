# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/strace/riscv32_autoreconf.patch
# Copyright (C) 2022 - 2023 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License version 2 as used by the T2 SDE.
# --- T2-COPYRIGHT-NOTE-END ---

sed -i '/^---/,$d' package/*/strace/riscv32_autoreconf.patch
for f in `find -name Makefile.in -o -name configure | grep -v test `; do  cp -vf $f{,.vanilla}; done
autoreconf
cd ..
fixfilediff riscv32_autoreconf.patch

--- strace-6.6/src/Makefile.in.vanilla	2023-12-18 20:15:21.300652048 +0100
+++ strace-6.6/src/Makefile.in	2023-12-18 20:15:26.638651820 +0100
@@ -2447,19 +2447,19 @@
 	linux/powerpc64le/set_scno.c	\
 	linux/powerpc64le/syscallent.h	\
 	linux/powerpc64le/userent.h	\
-	linux/riscv64/arch_defs_.h		\
-	linux/riscv64/arch_prstatus_regset.c \
-	linux/riscv64/arch_prstatus_regset.h \
-	linux/riscv64/arch_regs.c		\
-	linux/riscv64/get_error.c		\
-	linux/riscv64/get_scno.c		\
-	linux/riscv64/get_syscall_args.c	\
-	linux/riscv64/ioctls_arch0.h	\
-	linux/riscv64/ioctls_inc0.h	\
-	linux/riscv64/raw_syscall.h	\
-	linux/riscv64/set_error.c		\
-	linux/riscv64/set_scno.c		\
-	linux/riscv64/syscallent.h	\
+	linux/riscv/arch_defs_.h		\
+	linux/riscv/arch_prstatus_regset.c \
+	linux/riscv/arch_prstatus_regset.h \
+	linux/riscv/arch_regs.c		\
+	linux/riscv/get_error.c		\
+	linux/riscv/get_scno.c		\
+	linux/riscv/get_syscall_args.c	\
+	linux/riscv/ioctls_arch0.h	\
+	linux/riscv/ioctls_inc0.h	\
+	linux/riscv/raw_syscall.h	\
+	linux/riscv/set_error.c		\
+	linux/riscv/set_scno.c		\
+	linux/riscv/syscallent.h	\
 	linux/s390/arch_defs_.h		\
 	linux/s390/arch_prstatus_regset.c \
 	linux/s390/arch_prstatus_regset.h \
--- strace-6.6/Makefile.in.vanilla	2023-12-18 20:15:21.279652049 +0100
+++ strace-6.6/Makefile.in	2023-12-18 20:15:25.960651849 +0100
@@ -227,9 +227,9 @@
 	$(top_srcdir)/build-aux/missing \
 	$(top_srcdir)/debian/changelog.in \
 	$(top_srcdir)/doc/strace-log-merge.1.in \
-	$(top_srcdir)/doc/strace.1.in AUTHORS COPYING INSTALL NEWS \
-	README build-aux/ar-lib build-aux/compile \
-	build-aux/config.guess build-aux/config.sub \
+	$(top_srcdir)/doc/strace.1.in AUTHORS COPYING ChangeLog \
+	INSTALL NEWS README build-aux/ar-lib build-aux/compile \
+	build-aux/config.guess build-aux/config.sub build-aux/depcomp \
 	build-aux/install-sh build-aux/missing
 DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
 distdir = $(PACKAGE)-$(VERSION)
--- strace-6.6/configure.vanilla	2023-12-18 20:15:21.295652048 +0100
+++ strace-6.6/configure	2023-12-18 20:15:25.275651879 +0100
@@ -2072,7 +2072,7 @@
 #define $2 innocuous_$2
 
 /* System header to define __stub macros and hopefully few prototypes,
-   which can conflict with char $2 (void); below.  */
+   which can conflict with char $2 (); below.  */
 
 #include <limits.h>
 #undef $2
@@ -2083,7 +2083,7 @@
 #ifdef __cplusplus
 extern "C"
 #endif
-char $2 (void);
+char $2 ();
 /* The GNU C library defines this for functions which it implements
     to always fail with ENOSYS.  Some functions are actually named
     something starting with __ and the normal name is an alias.  */
@@ -2103,43 +2103,10 @@
 then :
   eval "$3=yes"
 else $as_nop
-  if test $ac_compiler_gnu = yes; then
-		     cat confdefs.h - <<_ACEOF >conftest.$ac_ext
-/* end confdefs.h.  */
-#undef $2
-/* Declare this function with the same prototype as __builtin_$2.
-  This removes a warning about conflicting types for built-in function $2 */
-#ifdef  __cplusplus
-extern "C" {
-#endif
-__typeof__(__builtin_$2) $2;
-__typeof__(__builtin_$2) *volatile f = $2;
-#ifdef  __cplusplus
-}
-#endif
-
-int
-main (void)
-{
-return f != $2;
-  ;
-  return 0;
-}
-_ACEOF
-if ac_fn_c_try_link "$LINENO"
-then :
-  eval "$3=yes"
-else $as_nop
   eval "$3=no"
 fi
 rm -f core conftest.err conftest.$ac_objext conftest.beam \
     conftest$ac_exeext conftest.$ac_ext
-		   else
-		     eval "$3=no"
-		   fi
-fi
-rm -f core conftest.err conftest.$ac_objext conftest.beam \
-    conftest$ac_exeext conftest.$ac_ext
 fi
 eval ac_res=\$$3
 	       { printf "%s\n" "$as_me:${as_lineno-$LINENO}: result: $ac_res" >&5
@@ -2626,7 +2593,9 @@
 /* Most of the following tests are stolen from RCS 5.7 src/conf.sh.  */
 struct buf { int x; };
 struct buf * (*rcsopen) (struct buf *, struct stat *, int);
-static char *e (char **p, int i)
+static char *e (p, i)
+     char **p;
+     int i;
 {
   return p[i];
 }
@@ -2677,7 +2646,6 @@
 extern int printf (const char *, ...);
 extern int dprintf (int, const char *, ...);
 extern void *malloc (size_t);
-extern void free (void *);
 
 // Check varargs macros.  These examples are taken from C99 6.10.3.5.
 // dprintf is used instead of fprintf to avoid needing to declare
@@ -4448,8 +4416,6 @@
 main (void)
 {
 FILE *f = fopen ("conftest.out", "w");
- if (!f)
-  return 1;
  return ferror (f) || fclose (f) != 0;
 
   ;
@@ -6387,9 +6353,14 @@
 		esac
 	fi
 	;;
+riscv32*)
+	arch=riscv
+
+printf "%s\n" "#define RISCV32 1" >>confdefs.h
+
+	;;
 riscv64*)
-	arch=riscv64
-	karch=riscv
+	arch=riscv
 
 printf "%s\n" "#define RISCV64 1" >>confdefs.h
 
@@ -15157,14 +15128,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char dladdr (void);
+   builtin and then its argument prototype would still apply.  */
+char dladdr ();
 int
 main (void)
 {
@@ -15235,14 +15200,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char timer_create (void);
+   builtin and then its argument prototype would still apply.  */
+char timer_create ();
 int
 main (void)
 {
@@ -15312,14 +15271,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char clock_gettime (void);
+   builtin and then its argument prototype would still apply.  */
+char clock_gettime ();
 int
 main (void)
 {
@@ -15389,14 +15342,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char log10 (void);
+   builtin and then its argument prototype would still apply.  */
+char log10 ();
 int
 main (void)
 {
@@ -15466,14 +15413,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char mq_open (void);
+   builtin and then its argument prototype would still apply.  */
+char mq_open ();
 int
 main (void)
 {
@@ -15737,14 +15678,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char dwfl_linux_proc_attach (void);
+   builtin and then its argument prototype would still apply.  */
+char dwfl_linux_proc_attach ();
 int
 main (void)
 {
@@ -15880,14 +15815,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char backtrace (void);
+   builtin and then its argument prototype would still apply.  */
+char backtrace ();
 int
 main (void)
 {
@@ -15949,14 +15878,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char _UPT_create (void);
+   builtin and then its argument prototype would still apply.  */
+char _UPT_create ();
 int
 main (void)
 {
@@ -16158,14 +16081,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char cplus_demangle (void);
+   builtin and then its argument prototype would still apply.  */
+char cplus_demangle ();
 int
 main (void)
 {
@@ -16306,14 +16223,8 @@
 
 /* Override any GCC internal prototype to avoid an error.
    Use char because int might match the return type of a GCC
-   builtin and then its argument prototype would still apply.
-   The 'extern "C"' is for builds by C++ compilers;
-   although this is not generally supported in C code supporting it here
-   has little cost and some practical benefit (sr 110532).  */
-#ifdef __cplusplus
-extern "C"
-#endif
-char $func (void);
+   builtin and then its argument prototype would still apply.  */
+char $func ();
 int
 main (void)
 {
@@ -19315,8 +19226,12 @@
 # Create a (secure) tmp directory for tmp files.
 
 {
-  tmp=`(umask 077 && mktemp -d "./confXXXXXX")` &&
-  test -n "$tmp" && test -d "$tmp"
+  tmp=`(umask 077 && mktemp -d "./confXXXXXX") 2>/dev/null` &&
+  test -d "$tmp"
+}  ||
+{
+  tmp=./conf$$-$RANDOM
+  (umask 077 && mkdir "$tmp")
 } || as_fn_error $? "cannot create a temporary directory in ." "$LINENO" 5
 ac_tmp=$tmp
 
