# --- T2-COPYRIGHT-BEGIN ---
# t2/package/*/llvm/llvm.conf
# Copyright (C) 2009 - 2025 The T2 SDE Project
# SPDX-License-Identifier: GPL-2.0
# --- T2-COPYRIGHT-END ---

runconf=0

cmake_mod() {
	tar $taropt `match_source_file -p cmake` -C ..
	mv -vf ../cmake-*src ../../cmake
}
hook_add preconf 5 cmake_mod

create_llvm_config_x() {
	# TODO: check -lz -lnucrses deps!
	local host=x86
	[[ $arch = x86* ]] && host=NaN # TODO: != native llvm target
	cat <<-EOT > $root/TOOLCHAIN/$toolsdir/bin/llvm-config-x
#!/bin/bash
llvm-config "\$@" |
sed \
-e 's, $host[^ ]*,,g' \\
-e 's,-L$root/TOOLCHAIN/cross/lib,-L$root$libdir,g' \\
-e 's,-I$root/TOOLCHAIN/cross/include,,g' \\
-e 's,-lLLVM,-lz -lncurses &,'
EOT
	chmod +x $root/TOOLCHAIN/$toolsdir/bin/llvm-config-x
}

targets="AMDGPU;BPF;WebAssembly;host" # host for cross compilation
xtargets="SPIRV"
target="$arch_target"

. $base/package/*/*/llvm-conf.in

# TODO: fix and maybe add a config.in option?
#var_append cmakeopt " " "-DLLVM_TARGETS_TO_BUILD='$targets'"
var_append cmakeopt " " "-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD='$xtargets'"
var_append cmakeopt " " "-DLLVM_DEFAULT_TARGET_TRIPLE=$target"

if atstage toolchain; then
	var_append cmakeopt " " "-DLLVM_HOST_TRIPLE=$arch_build"
elif atstage cross; then
	var_append cmakeopt " " "-DLLVM_TABLEGEN=$root/TOOLCHAIN/$toolsdir/bin/llvm-tblgen"
	var_append cmakeopt " " "-DLLVM_CONFIG_PATH=$root/TOOLCHAIN/$toolsdir/bin/llvm-config"
	var_append GCC_WRAPPER_FILTER '|' "sed 's,^/lib64/libcurses.so,-lcurses,'"
	var_append GCC_WRAPPER_FILTER '|' "sed 's,$root/lib64/libcurses.so,-lcurses,'"

	hook_add premake 5 "create_llvm_config_x"
fi

[ "${libdir##*/lib}" ] && var_append cmakeopt " " "-DLLVM_LIBDIR_SUFFIX=${libdir##*/lib}"
# builds libraries as static and links all of them into an unique shared one
var_append cmakeopt " " "-DLLVM_BUILD_LLVM_DYLIB=ON -DLLVM_LINK_LLVM_DYLIB=ON"
#var_append cmakeopt " " "-DBUILD_SHARED_LIBS=ON"

var_append cmakeopt " " "-DLLVM_ENABLE_ZLIB=ON"
var_append cmakeopt " " "-DLLVM_ENABLE_TERMINFO=OFF"
var_append cmakeopt " " "-DLLVM_ENABLE_BACKTRACES=OFF"

if pkginstalled binutils; then
    [ $stagelevel -gt 1 ] &&
	var_append cmakeopt " " "-DLLVM_BINUTILS_INCDIR=$root/usr/include"
    atstage toolchain &&
	var_append cmakeopt " " "-DLLVM_BINUTILS_INCDIR=$root/TOOLCHAIN/cross/usr/$arch_build/$arch_target/include"
fi

var_append cmakeopt " " "-DLLVM_ENABLE_RTTI=ON" # for Mesa?
var_append cmakeopt " " "-DLLVM_BUILD_TESTS=OFF -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_INCLUDE_TESTS=OFF"
var_append cmakeopt " " "-DLLVM_ENABLE_BINDINGS=OFF -DLLVM_INCLUDE_GO_TESTS=OFF"
var_append cmakeopt " " "-DLLVM_ENABLE_ZSTD=OFF" # TODO: .a's need -lzstd?

# required by rustc-1.81.x to link against the "llvm::machineinstr::dump() const" function
var_append cmakeopt " " -DLLVM_ENABLE_DUMP=ON
