# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/mesa/hotfix.patch.sparc
# Copyright (C) 2022 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License version 2 as used by the T2 SDE.
# --- T2-COPYRIGHT-NOTE-END ---

--- mesa-21.3.8/meson.build.vanilla	2022-07-15 21:25:09.880328773 +0200
+++ mesa-21.3.8/meson.build	2022-07-15 21:25:19.669328383 +0200
@@ -1304,7 +1304,7 @@
 
                   }''',
                name : 'GCC atomic builtins')
-  pre_args += '-DUSE_GCC_ATOMIC_BUILTINS'
+  #pre_args += '-DUSE_GCC_ATOMIC_BUILTINS'
 
   # Not all atomic calls can be turned into lock-free instructions, in which
   # GCC will make calls into the libatomic library. Check whether we need to
--- ./src/util/u_atomic.h.vanilla	2022-07-15 21:52:17.094263891 +0200
+++ ./src/util/u_atomic.h	2022-07-15 21:52:40.859262944 +0200
@@ -58,6 +58,8 @@
 #define p_atomic_set(_v, _i) (*(_v) = (_i))
 #define p_atomic_read(_v) (*(_v))
 #define p_atomic_read_relaxed(_v) (*(_v))
+#define __sync_add_and_fetch(_v, i) ++*(_v)
+#define __sync_sun_and_fetch(_v, i) --*(_v)
 #define p_atomic_dec_zero(v) (__sync_sub_and_fetch((v), 1) == 0)
 #define p_atomic_inc(v) (void) __sync_add_and_fetch((v), 1)
 #define p_atomic_dec(v) (void) __sync_sub_and_fetch((v), 1)
--- mesa-21.3.8/src/gallium/drivers/swr/rasterizer/common/os.h.vanilla	2022-07-15 21:58:17.679249514 +0200
+++ mesa-21.3.8/src/gallium/drivers/swr/rasterizer/common/os.h	2022-07-15 21:59:37.180246344 +0200
@@ -285,6 +285,9 @@
 #define strcpy_s(dst, size, src) strncpy(dst, src, size)
 #define GetCurrentProcessId getpid
 
+#define __sync_add_and_fetch(_v, i) ++*(_v)
+#define __sync_sun_and_fetch(_v, i) --*(_v)
+
 #define InterlockedCompareExchange(Dest, Exchange, Comparand) \
     __sync_val_compare_and_swap(Dest, Comparand, Exchange)
 #define InterlockedExchangeAdd(Addend, Value) __sync_fetch_and_add(Addend, Value)
