# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/cjs/hotfix-meson-no-tests.patch
# Copyright (C) 2024 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License version 2 as used by the T2 SDE.
# --- T2-COPYRIGHT-NOTE-END ---

--- cjs-6.2.0.tar.gz/meson.build.vanilla	2024-09-06 23:13:42.862404078 +0200
+++ cjs-6.2.0.tar.gz/meson.build	2024-09-06 23:18:27.264641062 +0200
@@ -606,21 +606,6 @@
 gjs_console = executable('cjs-console', gjs_console_srcs,
     dependencies: libgjs_dep, install: true)
 
-meson.add_install_script('build/symlink-gjs.py', get_option('bindir'))
-
-### Install data files #########################################################
-
-install_data('installed-tests/extra/gjs.supp',
-    install_dir: get_option('datadir') / api_name / 'valgrind')
-install_data('installed-tests/extra/lsan.supp',
-    install_dir: get_option('datadir') / api_name / 'lsan')
-
-if get_option('installed_tests')
-    schemadir = abs_datadir / 'glib-2.0' / 'schemas'
-    install_data('installed-tests/js/org.cinnamon.CjsTest.gschema.xml', install_dir: schemadir)
-    meson.add_install_script('build/compile-gschemas.py', schemadir)
-endif
-
 ### Generate pkg-config file ###################################################
 
 pkg.generate(libgjs, name: api_name, description: 'JS bindings for GObjects',
@@ -638,20 +623,12 @@
 ### Test environment ###########################################################
 
 tests_environment = environment()
-js_tests_builddir = meson.current_build_dir() / 'installed-tests' / 'js'
-libgjs_test_tools_builddir = js_tests_builddir / 'libgjstesttools'
 # GJS_PATH is empty here since we want to force the use of our own
 # resources. G_FILENAME_ENCODING ensures filenames are not UTF-8
 tests_environment.set('TOP_BUILDDIR', meson.build_root())
 tests_environment.set('GJS_USE_UNINSTALLED_FILES', '1')
 tests_environment.set('GJS_PATH', '')
 tests_environment.set('GJS_DEBUG_OUTPUT', 'stderr')
-tests_environment.prepend('GI_TYPELIB_PATH', meson.current_build_dir(),
-    js_tests_builddir, libgjs_test_tools_builddir)
-tests_environment.prepend('LD_LIBRARY_PATH', meson.current_build_dir(),
-    js_tests_builddir, libgjs_test_tools_builddir)
-tests_environment.prepend('DYLD_FALLBACK_LIBRARY_PATH', meson.current_build_dir(),
-    js_tests_builddir, libgjs_test_tools_builddir)
 tests_environment.set('G_FILENAME_ENCODING', 'latin1')
 # Workaround for https://github.com/google/sanitizers/issues/1322
 tests_environment.set('ASAN_OPTIONS', 'intercept_tls_get_addr=0')
@@ -663,110 +640,16 @@
         meson.current_source_dir() / 'installed-tests' / 'extra' / 'tsan.supp'))
 tests_environment.set('G_SLICE', 'always-malloc')
 tests_environment.set('NO_AT_BRIDGE', '1')
-tests_environment.set('GSETTINGS_SCHEMA_DIR', js_tests_builddir)
 tests_environment.set('GSETTINGS_BACKEND', 'memory')
 tests_environment.set('G_DEBUG', 'fatal-warnings,fatal-criticals')
 
 tests_locale = 'N/A'
-if cxx.get_argument_syntax() != 'msvc'
-    result = run_command('build/choose-tests-locale.sh', check: false)
-    if result.returncode() == 0
-        tests_locale = result.stdout().strip()
-        tests_environment.set('LC_ALL', tests_locale)
-    endif
-endif
-
-if not get_option('skip_gtk_tests')
-    tests_environment.set('ENABLE_GTK', 'yes')
-endif
-
 if get_option('b_coverage')
     tests_environment.set('GJS_UNIT_COVERAGE_OUTPUT', 'lcov')
     tests_environment.set('GJS_UNIT_COVERAGE_PREFIX',
         'resource:///org/gnome/gjs')
 endif
 
-### Tests and test setups ######################################################
-
-subdir('installed-tests')
-
-# Note: The test program in test/ needs to be ported
-#       to Windows before we can build it on Windows.
-if host_machine.system() != 'windows'
-    subdir('test')
-endif
-
-valgrind_environment = environment()
-valgrind_environment.set('G_SLICE', 'always-malloc,debug-blocks')
-valgrind_environment.set('G_DEBUG',
-    'fatal-warnings,fatal-criticals,gc-friendly')
-valgrind_environment.set('VALGRIND', 'valgrind')
-
-glib_prefix = glib.get_variable(pkgconfig: 'prefix', default_value: '/usr')
-glib_suppresssions = (glib_prefix / 'share' / 'glib-2.0' / 'valgrind' /
-    'glib.supp')
-gjs_suppressions = (meson.current_source_dir() / 'installed-tests' / 'extra' /
-    'cjs.supp')
-valgrind_args = [
-    '--suppressions=@0@'.format(glib_suppresssions),
-    '--suppressions=@0@'.format(gjs_suppressions),
-    '--leak-check=full',
-    '--num-callers=15',
-    '--trace-children=yes',
-    '--trace-children-skip=*basename,*cat,*diff,*echo,*grep,*rm,*sed,*stat,*true',
-    '--error-exitcode=1'
-]
-
-add_test_setup('quiet', env: ['GJS_DEBUG_TOPICS='], is_default: true)
-add_test_setup('verbose')
-
-add_test_setup('valgrind', timeout_multiplier: 40, env: valgrind_environment,
-    exe_wrapper: ['valgrind'] + valgrind_args)
-
-zeal2_environment = environment()
-zeal2_environment.set('JS_GC_ZEAL', '2,10')
-add_test_setup('extra_gc', timeout_multiplier: 40, env: zeal2_environment)
-
-zeal4_environment = environment()
-zeal4_environment.set('JS_GC_ZEAL', '4')
-add_test_setup('pre_verify', timeout_multiplier: 40, env: zeal4_environment)
-
-zeal11_environment = environment()
-zeal11_environment.set('JS_GC_ZEAL', '11')
-add_test_setup('post_verify', timeout_multiplier: 2, env: zeal11_environment)
-
-### Warn about conditions that may affect runtime ##############################
-
-if gi.version().version_compare('<1.71.0')
-    warning('''You do not have a new enough version of
-gobject-introspection to run the tests. You can still build GJS, but some
-tests will fail.''')
-endif
-
-if tests_locale == 'C' or tests_locale == 'N/A'
-    warning('''Your libc does not have the C.UTF-8 locale and no other
-suitable UTF-8 fallback locale could be found. You can still build GJS, but
-some tests will fail.''')
-endif
-
-if get_option('buildtype').startswith('debug') and nondebug_spidermonkey
-    warning('''Your copy of SpiderMonkey is not debug-enabled, but you are
-building a debug or debugoptimized build. This will make development more
-difficult. Consider reconfiguring SpiderMonkey with --enable-debug.''')
-endif
-
-if not build_cairo
-    warning('Building without Cairo support, not all tests will be run.')
-endif
-
-if get_option('skip_gtk_tests')
-    warning('Not using GTK, not all tests will be run.')
-endif
-
-if get_option('skip_dbus_tests')
-    warning('Not using DBus, not all tests will be run.')
-endif
-
 ### Summarize options ##########################################################
 
 prefix = get_option('prefix')
@@ -804,7 +687,6 @@
 endif
 summary({
     'Build type': get_option('buildtype'),
-    'Installed tests': get_option('installed_tests'),
     '-Bsymbolic-functions': get_option('bsymbolic_functions'),
     'Skip DBus tests': get_option('skip_dbus_tests'),
     'Skip GTK tests': get_option('skip_gtk_tests'),
@@ -818,10 +700,3 @@
     'Dtrace debugging': get_option('dtrace'),
     'Systemtap debugging': get_option('systemtap'),
 }, section: 'Optional features', bool_yn: true)
-
-### Maintainer scripts #########################################################
-
-run_target('maintainer-upload-release',
-  command: ['build/maintainer-upload-release.sh',
-            meson.project_name(),
-            meson.project_version()])
--- cjs-6.2.0.tar.gz/installed-tests/js/meson.build.vanilla	2024-09-06 23:23:27.129994864 +0200
+++ cjs-6.2.0.tar.gz/installed-tests/js/meson.build	2024-09-06 23:24:05.796298053 +0200
@@ -70,12 +70,6 @@
     include_directories: gi_tests_include,
     dependencies: regress_dependencies, install: get_option('installed_tests'),
     install_dir: installed_tests_execdir)
-regress_gir = gnome.generate_gir(libregress, includes: regress_gir_includes,
-    sources: regress_sources, namespace: 'Regress', nsversion: '1.0',
-    identifier_prefix: 'Regress', symbol_prefix: 'regress_',
-    extra_args: ['--warn-all', '--warn-error'] + regress_gir_c_args,
-    install: get_option('installed_tests'), install_dir_gir: false,
-    install_dir_typelib: installed_tests_execdir)
 regress_typelib = regress_gir[1]
 
 if not skip_warnlib
@@ -88,11 +82,6 @@
     # This should have --warn-all turned off, but there is currently no way to
     # do so in gnome.generate_gir().
     # See https://github.com/mesonbuild/meson/issues/5876
-    warnlib_gir = gnome.generate_gir(libwarnlib, includes: ['Gio-2.0'],
-        sources: warnlib_sources, namespace: 'WarnLib', nsversion: '1.0',
-        symbol_prefix: 'warnlib_', header: 'warnlib.h',
-        install: get_option('installed_tests'), install_dir_gir: false,
-        install_dir_typelib: installed_tests_execdir)
     warnlib_typelib = warnlib_gir[1]
 endif
 
@@ -101,12 +90,6 @@
     include_directories: gi_tests_include,
     c_args:  test_gir_extra_c_args + test_gir_warning_c_args,
     install: get_option('installed_tests'), install_dir: installed_tests_execdir)
-gimarshallingtests_gir = gnome.generate_gir(libgimarshallingtests,
-    includes: ['Gio-2.0'], sources: gimarshallingtests_sources,
-    namespace: 'GIMarshallingTests', nsversion: '1.0',
-    symbol_prefix: 'gi_marshalling_tests_', extra_args: '--warn-error',
-    install: get_option('installed_tests'), install_dir_gir: false,
-    install_dir_typelib: installed_tests_execdir)
 gimarshallingtests_typelib = gimarshallingtests_gir[1]
 
 subdir('libgjstesttools')
@@ -207,7 +190,7 @@
 if not get_option('skip_gtk_tests')
     have_gtk4 = dependency('gtk4', required: false).found()
 
-    if have_gtk4 
+    if have_gtk4
         # FIXME: find out why GTK4 tries to acquire a message bus
         dbus_tests += 'Gtk4'
     endif
--- cjs-6.2.0.tar.gz/meson.build.vanilla	2024-09-06 23:27:47.176032627 +0200
+++ cjs-6.2.0.tar.gz/meson.build	2024-09-06 23:28:08.299198022 +0200
@@ -590,15 +590,6 @@
 libgjs_dep = declare_dependency(link_with: [libgjs, libgjs_jsapi],
     dependencies: base_build_dep, include_directories: top_include)
 
-### Build CjsPrivate introspection library #####################################
-
-gjs_private_gir = gnome.generate_gir(libgjs,
-    includes: ['GObject-2.0', 'Gio-2.0'], sources: libgjs_private_sources,
-    namespace: 'CjsPrivate', nsversion: '1.0', identifier_prefix: 'Gjs',
-    symbol_prefix: 'gjs_', extra_args: '--warn-error', install: true,
-    install_dir_gir: false, install_dir_typelib: pkglibdir / 'girepository-1.0')
-gjs_private_typelib = gjs_private_gir[1]
-
 ### Build cjs-console interpreter ##############################################
 
 gjs_console_srcs = ['cjs/console.cpp']
