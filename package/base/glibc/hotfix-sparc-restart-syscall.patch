Fix signal restart for sparc as the linux kernel rewinds PC by 4-bytes
to the previous insn to restore the syscall number.

Signed-off-by: Ren√© Rebe <rene@exactcode.de>

--- glibc-2.40/sysdeps/unix/sysv/linux/sparc/sysdep.h.vanilla	2024-09-08 12:14:04.900107793 +0200
+++ glibc-2.40/sysdeps/unix/sysv/linux/sparc/sysdep.h	2024-09-08 12:15:04.530109326 +0200
@@ -72,8 +72,8 @@
 #define internal_syscall1(string,name,arg1)				\
 ({									\
 	long int _arg1 = (long int) (arg1);				\
-	register long int __g1 __asm__("g1") = (name);			\
 	register long int  __o0 __asm__ ("o0") = _arg1;			\
+	register long int __g1 __asm__("g1") = (name);			\
 	__asm __volatile (string : "=r" (__o0) :			\
 			  "r" (__g1), "0" (__o0) :			\
 			  __SYSCALL_CLOBBERS);				\
@@ -84,9 +84,9 @@
 ({									\
 	long int _arg1 = (long int) (arg1);				\
 	long int _arg2 = (long int) (arg2);				\
-	register long int __g1 __asm__("g1") = (name);			\
 	register long int __o0 __asm__ ("o0") = _arg1;			\
 	register long int __o1 __asm__ ("o1") = _arg2;			\
+	register long int __g1 __asm__("g1") = (name);			\
 	__asm __volatile (string : "=r" (__o0) :			\
 			  "r" (__g1), "0" (__o0), "r" (__o1) :		\
 			  __SYSCALL_CLOBBERS);				\
@@ -98,10 +98,10 @@
 	long int _arg1 = (long int) (arg1);				\
 	long int _arg2 = (long int) (arg2);				\
 	long int _arg3 = (long int) (arg3);				\
-	register long int __g1 __asm__("g1") = (name);			\
 	register long int __o0 __asm__ ("o0") = _arg1;			\
 	register long int __o1 __asm__ ("o1") = _arg2;			\
 	register long int __o2 __asm__ ("o2") = _arg3;			\
+	register long int __g1 __asm__("g1") = (name);			\
 	__asm __volatile (string : "=r" (__o0) :			\
 			  "r" (__g1), "0" (__o0), "r" (__o1),		\
 			  "r" (__o2) :					\
@@ -115,11 +115,11 @@
 	long int _arg2 = (long int) (arg2);				\
 	long int _arg3 = (long int) (arg3);				\
 	long int _arg4 = (long int) (arg4);				\
-	register long int __g1 __asm__("g1") = (name);			\
 	register long int __o0 __asm__ ("o0") = _arg1;			\
 	register long int __o1 __asm__ ("o1") = _arg2;			\
 	register long int __o2 __asm__ ("o2") = _arg3;			\
 	register long int __o3 __asm__ ("o3") = _arg4;			\
+	register long int __g1 __asm__("g1") = (name);			\
 	__asm __volatile (string : "=r" (__o0) :			\
 			  "r" (__g1), "0" (__o0), "r" (__o1),		\
 			  "r" (__o2), "r" (__o3) :			\
@@ -134,12 +134,12 @@
 	long int _arg3 = (long int) (arg3);				\
 	long int _arg4 = (long int) (arg4);				\
 	long int _arg5 = (long int) (arg5);				\
-	register long int __g1 __asm__("g1") = (name);			\
 	register long int __o0 __asm__ ("o0") = _arg1;			\
 	register long int __o1 __asm__ ("o1") = _arg2;			\
 	register long int __o2 __asm__ ("o2") = _arg3;			\
 	register long int __o3 __asm__ ("o3") = _arg4;			\
 	register long int __o4 __asm__ ("o4") = _arg5;			\
+	register long int __g1 __asm__("g1") = (name);			\
 	__asm __volatile (string : "=r" (__o0) :			\
 			  "r" (__g1), "0" (__o0), "r" (__o1),		\
 			  "r" (__o2), "r" (__o3), "r" (__o4) :		\
@@ -155,13 +155,13 @@
 	long int _arg4 = (long int) (arg4);				\
 	long int _arg5 = (long int) (arg5);				\
 	long int _arg6 = (long int) (arg6);				\
-	register long int __g1 __asm__("g1") = (name);			\
 	register long int __o0 __asm__ ("o0") = _arg1;			\
 	register long int __o1 __asm__ ("o1") = _arg2;			\
 	register long int __o2 __asm__ ("o2") = _arg3;			\
 	register long int __o3 __asm__ ("o3") = _arg4;			\
 	register long int __o4 __asm__ ("o4") = _arg5;			\
 	register long int __o5 __asm__ ("o5") = _arg6;			\
+	register long int __g1 __asm__("g1") = (name);			\
 	__asm __volatile (string : "=r" (__o0) :			\
 			  "r" (__g1), "0" (__o0), "r" (__o1),		\
 			  "r" (__o2), "r" (__o3), "r" (__o4),		\
