# --- T2-COPYRIGHT-BEGIN ---
# t2/package/*/rustc/sparcv9.patch
# Copyright (C) 2023 - 2025 The T2 SDE Project
# SPDX-License-Identifier: GPL-2.0 or patched project license
# --- T2-COPYRIGHT-END ---

--- rustc-1.86.0-src/compiler/rustc_codegen_ssa/src/back/metadata.rs.vanilla	2025-04-12 19:20:38.681936362 +0200
+++ rustc-1.86.0-src/compiler/rustc_codegen_ssa/src/back/metadata.rs	2025-04-12 19:38:58.022221263 +0200
@@ -362,6 +362,14 @@
 
             e_flags
         }
+        Architecture::Sparc => {
+            let mut e_flags: u32 = elf::EF_SPARC_32PLUS;
+            if sess.unstable_target_features.contains(&sym::v8plus) {
+                e_flags |= elf::EF_SPARC_32PLUS;
+            }
+
+            e_flags
+        }
         Architecture::LoongArch64 => {
             // Source: https://github.com/loongson/la-abi-specs/blob/release/laelf.adoc#e_flags-identifies-abi-type-and-version
             let mut e_flags: u32 = elf::EF_LARCH_OBJABI_V1;
--- rustc-1.86.0-src/compiler/rustc_codegen_llvm/src/llvm_util.rs.vanilla	2025-04-12 19:12:48.179455005 +0200
+++ rustc-1.86.0-src/compiler/rustc_codegen_llvm/src/llvm_util.rs	2025-04-12 19:13:14.861253005 +0200
@@ -660,7 +660,7 @@
             .split(',')
             .filter(|v| !v.is_empty())
             // Drop +v8plus feature introduced in LLVM 20.
-            .filter(|v| *v != "+v8plus" || get_version() >= (20, 0, 0))
+            //.filter(|v| *v != "+v8plus" || get_version() >= (20, 0, 0))
             .map(String::from),
     );
 
--- rustc-1.86.0-src/compiler/rustc_target/src/spec/targets/sparcv9b_unknown_linux_gnu.rs.vanilla	2025-04-03 14:01:53.991704161 +0200
+++ rustc-1.86.0-src/compiler/rustc_target/src/spec/targets/sparcv9b_unknown_linux_gnu.rs	2025-04-03 14:02:17.152680371 +0200
@@ -16,7 +16,7 @@
         arch: "sparc".into(),
         options: TargetOptions {
-            //features: "+v8plus".into(),
-            cpu: "v8".into(),
+            features: "+v8plus".into(),
+            cpu: "v9".into(), // v9b
             endian: Endian::Big,
-            late_link_args: TargetOptions::link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-mcpu=v8", "-m32"],),
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-mcpu=v9", "-m32"],),
             max_atomic_width: Some(32),
--- rustc-1.86.0-src/compiler/rustc_target/src/spec/targets/sparcv9_unknown_linux_gnu.rs.vanilla	2025-04-03 14:01:53.991704161 +0200
+++ rustc-1.86.0-src/compiler/rustc_target/src/spec/targets/sparcv9_unknown_linux_gnu.rs	2025-04-03 14:02:17.152680371 +0200
@@ -16,7 +16,7 @@
         arch: "sparc".into(),
         options: TargetOptions {
-            //features: "+v8plus".into(),
-            cpu: "v8".into(),
+            features: "+v8plus".into(),
+            cpu: "v9".into(),
             endian: Endian::Big,
-            late_link_args: TargetOptions::link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-mcpu=v8", "-m32"],),
+            late_link_args: TargetOptions::link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-mcpu=v9", "-m32"],),
             max_atomic_width: Some(32),
