# --- T2-COPYRIGHT-BEGIN ---
# t2/package/*/rustc/arm.patch
# Copyright (C) 2022 - 2025 The T2 SDE Project
# SPDX-License-Identifier: GPL-2.0 or patched project license
# --- T2-COPYRIGHT-END ---

--- rustc-1.85.0-src/compiler/rustc_target/src/spec/targets/armv6eb_unknown_linux_gnueabihf.rs.vanilla	2025-02-21 12:48:27.205811705 +0100
+++ rustc-1.85.0-src/compiler/rustc_target/src/spec/targets/armv6eb_unknown_linux_gnueabihf.rs	2025-02-21 12:48:58.295279666 +0100
@@ -14,9 +14,9 @@
         data_layout: "E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
         arch: "arm".into(),
         options: TargetOptions {
-            abi: "eabi".into(),
-            llvm_floatabi: Some(FloatAbi::Soft),
-            features: "+strict-align,+v8,+crc".into(),
+            abi: "eabihf".into(),
+            llvm_floatabi: Some(FloatAbi::Hard),
+            features: "+strict-align,+v6,+vfp2,+crc".into(),
             endian: Endian::Big,
             max_atomic_width: Some(64),
             mcount: "\u{1}__gnu_mcount_nc".into(),
--- rustc-1.85.0-src/compiler/rustc_target/src/spec/targets/armv6eb_unknown_linux_gnueabi.rs.vanilla	2025-02-21 12:49:33.374847877 +0100
+++ rustc-1.85.0-src/compiler/rustc_target/src/spec/targets/armv6eb_unknown_linux_gnueabi.rs	2025-02-21 12:49:52.001295942 +0100
@@ -16,7 +16,7 @@
         options: TargetOptions {
             abi: "eabi".into(),
             llvm_floatabi: Some(FloatAbi::Soft),
-            features: "+strict-align,+v8,+crc".into(),
+            features: "+strict-align,+v6,+soft-float,+crc".into(),
             endian: Endian::Big,
             max_atomic_width: Some(64),
             mcount: "\u{1}__gnu_mcount_nc".into(),
--- rustc-1.85.0-src/compiler/rustc_target/src/spec/targets/armv5te_unknown_linux_gnueabihf.rs.vanilla	2025-02-21 12:50:21.466435653 +0100
+++ rustc-1.85.0-src/compiler/rustc_target/src/spec/targets/armv5te_unknown_linux_gnueabihf.rs	2025-02-21 12:50:47.005241083 +0100
@@ -13,9 +13,9 @@
         data_layout: "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
         arch: "arm".into(),
         options: TargetOptions {
-            abi: "eabi".into(),
-            llvm_floatabi: Some(FloatAbi::Soft),
-            features: "+soft-float,+strict-align".into(),
+            abi: "eabihf".into(),
+            llvm_floatabi: Some(FloatAbi::Hard),
+            features: "+strict-align".into(),
             // Atomic operations provided by compiler-builtins
             max_atomic_width: Some(32),
             mcount: "\u{1}__gnu_mcount_nc".into(),
