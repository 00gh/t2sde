# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/rustc/rustc.conf
# Copyright (C) 2018 - 2022 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2.
# --- T2-COPYRIGHT-NOTE-END ---

if [ $stagelevel -gt 1 ] && [ $prefix_auto = 1 ]; then
	prefix=opt/rust # TODO: maybe a config option
	set_confopt
fi

rustc_prepatch() {
	# some more t2 ports
	cp -v compiler/rustc_target/src/spec/riscv32{gc,}_unknown_linux_gnu.rs
	cp -v compiler/rustc_target/src/spec/riscv64{gc,}_unknown_linux_gnu.rs
	cp -v compiler/rustc_target/src/spec/riscv32{gc,}_unknown_linux_musl.rs
	cp -v compiler/rustc_target/src/spec/riscv64{gc,}_unknown_linux_musl.rs
	cp -v compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi{64,n32}.rs
}
hook_add prepatch 5 rustc_prepatch

rustc_preconf() {
	# -t2- default target
	local rust_target="${arch_target/-t2-/-unknown-}"

	# llvm_target and .vendor
	sed 's/-unknown-/-t2-/; s/options:.*TargetOptions.*{/&\nvendor: "t2".into(),/' \
		compiler/rustc_target/src/spec/${rust_target//-/_}.rs > \
		compiler/rustc_target/src/spec/${arch_target//-/_}.rs

	# add -t2- triplet, specs:
	sed -i "/\"${arch_target/-t2-/-unknown-}\"/ {h; s/unknown/t2/gp; g}" \
		compiler/rustc_target/src/spec/mod.rs

	# cc-based linking:
	sed -i "/\"${arch_target/-t2-/-unknown-}\"/ {h; s/unknown/t2/gp; g}" \
		vendor/cc*/src/lib.rs
}
hook_add preconf 5 rustc_preconf

# AArch64 AMDGPU ARM BPF Hexagon Lanai Mips MSP430 NVPTX PowerPC RISCV Sparc SystemZ WebAssembly X86 XCore
# keep in sync w/ llvm!;-)
targets="WebAssembly"
case $arch in
	arm) var_insert targets ';' 'ARM' ;;
	arm64) var_insert targets ';' 'AArch64' ;;
	mips*) var_insert targets ';' 'Mips' ;;
	sparc*) var_insert targets ';' 'Sparc' ;;
	powerpc*) var_insert targets ';' 'PowerPC' ;;
	riscv*) var_insert targets ';' 'RISCV' ;;
	x86*|*) var_insert targets ';' 'X86' ;;
esac

rust_target=${arch_target/sparcv*-t2/sparc-t2}

rustc_config_toml() {
    sed "/^\[target.${rust_target}\]/,/^\[target./ { # /-t2-/-unknown-
	s,^#*\(cc =\) .*,\1 \"${archprefix}cc\",
	s,^#*\(cxx =\) .*,\1 \"${archprefix}c++\",
	s,^#*\(ar =\) .*,\1 \"${archprefix}ar\",
	s,^#*\(ranlib =\) .*,\1 \"${archprefix}ranlib\",
	s,^#*\(linker =\) .*,\1 \"${archprefix}cc\",
	s,^#*\(llvm-config =\).*,\1 \"$sysroot/TOOLCHAIN/tools.cross/bin/llvm-config-x\",
    }; s,^#*\(targets =\) .*,\1 \"$targets\"," -i config.toml
}

confopt=
cleanconfopt=0

[ $stagelevel -eq 1 ] &&
	var_append confopt " " "--prefix=$sysroot/TOOLCHAIN/$toolsdir" ||
	var_append confopt " " "--prefix=$root/$prefix --libdir=$root$libdir"

var_append confopt " " "--release-channel=stable"
var_append confopt " " "--disable-codegen-tests" # needs llvm's FileCheck
var_append confopt " " "--disable-docs"

if atstage native; then
    var_append confopt " " "--llvm-config=$(which llvm-config)"
    var_append confopt " " "--enable-local-rust"
else
    var_append confopt " " "--llvm-config=$sysroot/TOOLCHAIN/tools.cross/bin/llvm-config"
    var_append confopt ' ' "--build=${arch_build/nocross/unknown}"

    hook_add premake 5 "rustc_config_toml"

    # rustc specific pseudo toolchain
    if [ $stagelevel -eq 1 ]; then
	var_append confopt ' ' "--host=${arch_build/nocross/unknown}"
	var_append confopt ' ' "--target=${rust_target},${arch_build/-nocross-/-unknown-}" # /-t2-/-unknown-
	var_append confopt " " "--enable-extended" # build cargo, too
    else
	var_append confopt " " "--enable-local-rust"
	var_append confopt ' ' "--host=${arch_target}" # /-t2-/-unknown-
	var_append confopt ' ' "--target=${rust_target}" # /-t2-/-unknown-
    fi
fi

makeopt=
makeinstopt=
runcargo=0

hook_add inmake 5 "./x.py build"
hook_add postmake 5 "./x.py install"
