# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/rustc/hotfix-musl-targets.prepatch
# Copyright (C) 2024 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2.
# --- T2-COPYRIGHT-NOTE-END ---

--- rustc-1.79.0-src/compiler/rustc_target/src/spec/base/linux_musl.rs.vanilla	2024-08-02 10:16:54.596002963 +0200
+++ rustc-1.79.0-src/compiler/rustc_target/src/spec/base/linux_musl.rs	2024-08-02 10:21:23.559003806 +0200
@@ -1,16 +1,16 @@
-use crate::spec::crt_objects;
-use crate::spec::{base, LinkSelfContainedDefault, TargetOptions};
+use crate::spec::crt_objects;
+use crate::spec::{base, LinkSelfContainedDefault, TargetOptions};
 
 pub fn opts() -> TargetOptions {
     let mut base = base::linux::opts();
 
     base.env = "musl".into();
-    base.pre_link_objects_self_contained = crt_objects::pre_musl_self_contained();
-    base.post_link_objects_self_contained = crt_objects::post_musl_self_contained();
-    base.link_self_contained = LinkSelfContainedDefault::InferredForMusl;
+    base.pre_link_objects_self_contained = crt_objects::pre_musl_self_contained();
+    base.post_link_objects_self_contained = crt_objects::post_musl_self_contained();
+    base.link_self_contained = LinkSelfContainedDefault::InferredForMusl;
 
     // These targets statically link libc by default
-    base.crt_static_default = true;
+    //base.crt_static_default = true;
 
     base
 }

--- rustc-1.79.0-src/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_musl.rs.vanilla	2024-08-01 23:45:08.188465050 +0200
+++ rustc-1.79.0-src/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_musl.rs	2024-08-01 23:47:24.686465478 +0200
@@ -7,7 +7,7 @@
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
     base.stack_probes = StackProbeType::Inline;
-    base.static_position_independent_executables = true;
+    //base.static_position_independent_executables = true;
     base.supported_sanitizers = SanitizerSet::ADDRESS
         | SanitizerSet::CFI
         | SanitizerSet::LEAK
--- rustc-1.79.0-src/compiler/rustc_target/src/spec/targets/s390x_unknown_linux_musl.rs.vanilla	2024-08-01 23:45:44.042465162 +0200
+++ rustc-1.79.0-src/compiler/rustc_target/src/spec/targets/s390x_unknown_linux_musl.rs	2024-08-01 23:47:17.156465454 +0200
@@ -12,7 +12,7 @@
     base.features = "-vector".into();
     base.max_atomic_width = Some(64);
     base.min_global_align = Some(16);
-    base.static_position_independent_executables = true;
+    //base.static_position_independent_executables = true;
     base.stack_probes = StackProbeType::Inline;
     base.supported_sanitizers =
         SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::MEMORY | SanitizerSet::THREAD;
