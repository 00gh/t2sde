# --- T2-COPYRIGHT-BEGIN ---
# t2/package/*/chromium/chromium.conf
# Copyright (C) 2023 - 2025 The T2 SDE Project
# SPDX-License-Identifier: GPL-2.0
# --- T2-COPYRIGHT-END ---

runmake=0
CC=${CC/gcc/clang} CXX=${CXX/g++/clang++}

export RUSTC_BOOTSTRAP=1

chromium_flags="
	blink_enable_generated_code_formatting=false
	build_dawn_tests=false
	chrome_pgo_phase=0
	clang_base_path=\"/usr\"
	clang_use_chrome_plugins=false
	clang_version=\"20\"
	disable_fieldtrial_testing_config=true
	enable_freetype=true
	enable_nacl=false
	enable_nocompile_tests=false
	enable_pseudolocales=false
	enable_reading_list=false
	enable_remoting=false
	enable_reporting=false
	enable_vr=false
	enable_widevine=false
	ffmpeg_branding=\"Chrome\"
	icu_use_data_file=false
	is_asan=false
	is_cfi=false
	is_debug=false
	is_official_build=true
	link_pulseaudio=true
	media_use_ffmpeg=true
	media_use_libvpx=true
	media_use_openh264=true
	proprietary_codecs=true
	rtc_build_json=false
	rtc_build_libsrtp=true
	rtc_build_libvpx=true
	rtc_build_opus=false
	rtc_build_ssl=true
	rtc_link_pipewire=false
	rtc_use_h264=false
	rtc_use_pipewire=false
	rust_bindgen_root=\"/usr\"
	rust_sysroot_absolute=\"/opt\/rust\"
	rustc_version=\"rustc 1.82.0 (f6e511eec 2024-10-15) (built from a source tarball)\"
	safe_browsing_use_unrar=false
	symbol_level=0
	treat_warnings_as_errors=false
	use_custom_libcxx=true
	use_official_google_api_keys=false
	use_pulseaudio=true
	use_qt5=false
	use_sysroot=false
	use_system_libffi=true
	use_thin_lto=false
	use_unofficial_version_number=false
	use_vaapi=true
"

s_libs="
	brotli
	dav1d
	flac
	fontconfig
	freetype
	harfbuzz-ng
	libdrm
	libjpeg
	libsecret
	libusb
	libwebp
	libxml
	libxslt
	openh264
	opus
	zstd
"

chromium_premake() {
	for x in $s_libs libjpeg_turbo unrar; do
		echo "Removing buildscripts for system provided $x"
		x="${x/swiftshader-/swiftshader/third_party/}"
			find . -type f -path "*third_party/$x/*" \
			\! -path "*third_party/$x/chromium/*" \
			\! -path "*third_party/$x/google/*" \
			\! -path './base/third_party/icu/*' \
			\! -path './third_party/libxml/*' \
			\! -path './third_party/pdfium/third_party/freetype/include/pstables.h' \
			\! -path './third_party/harfbuzz-ng/utils/hb_scoped.h' \
			\! -path './third_party/crashpad/crashpad/third_party/zlib/zlib_crashpad.h' \
			\! -regex '.*\.\(gn\|gni\|isolate\|py\)' \
			-delete
	done
	
	echo "Replacing gn files"
	build/linux/unbundle/replace_gn_files.py --system-libraries $s_libs

	mkdir -p third_party/node/linux/node-linux-x64/bin
	ln -sf /usr/bin/node third_party/node/linux/node-linux-x64/bin/
	
	# allow system libs in official build
	sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
		tools/generate_shim_headers/generate_shim_headers.py
	
	# hack to force using the shim header files of tensorflow-text
	rm -Rf ./third_party/tflite/src/tensorflow/core/lib/core

	gn gen out/bld --args="$(echo $chromium_flags)"
}
hook_add premake 1 chromium_premake

chromium_inmake() {
	ninja -C out/bld chrome
}
hook_add inmake 1 chromium_inmake

chromium_postmake() {
	cd ./out/bld
	mkdir -p $root/opt/chromium/bin
	
	install chrome -t $root/opt/chromium/bin
	install chrome_crashpad_handler -t $root/opt/chromium/bin
	install v8_context_snapshot.bin -t $root/opt/chromium/bin
	install v8_context_snapshot_generator -t $root/opt/chromium/bin
	
	for so in *.so*; do
		install "$so" -t $root/opt/chromium/bin
	done

	for pak in *.pak; do
		install "$pak" -t $root/opt/chromium/bin
	done
	
	mkdir -p $root/opt/chromium/bin/locales
	for pak in locales/*.pak; do
		install "$pak" -t $root/opt/chromium/bin/locales
	done

	for json in *.json; do
		install "$json" -t $root/opt/chromium/bin
	done
}
hook_add postmake 1 chromium_postmake
