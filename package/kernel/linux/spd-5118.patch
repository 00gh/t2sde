# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/linux/spd-5118.patch
# Copyright (C) 2023 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License version 2 as used by the T2 SDE.
# --- T2-COPYRIGHT-NOTE-END ---

--- linux-6.2/drivers/hwmon/Makefile.vanilla	2023-03-26 20:08:00.724240065 +0200
+++ linux-6.2/drivers/hwmon/Makefile	2023-03-26 20:10:17.800237355 +0200
@@ -98,6 +98,7 @@
 obj-$(CONFIG_SENSORS_INTEL_M10_BMC_HWMON) += intel-m10-bmc-hwmon.o
 obj-$(CONFIG_SENSORS_IT87)	+= it87.o
 obj-$(CONFIG_SENSORS_JC42)	+= jc42.o
+obj-$(CONFIG_SENSORS_SPD5118)	+= spd5118.o
 obj-$(CONFIG_SENSORS_K8TEMP)	+= k8temp.o
 obj-$(CONFIG_SENSORS_K10TEMP)	+= k10temp.o
 obj-$(CONFIG_SENSORS_LAN966X)	+= lan966x-hwmon.o
--- linux-6.2/drivers/hwmon/Kconfig.vanilla	2023-03-26 20:08:00.729240064 +0200
+++ linux-6.2/drivers/hwmon/Kconfig	2023-03-26 20:24:02.545221056 +0200
@@ -819,6 +819,16 @@
 	  This driver can also be built as a module. If so, the module
 	  will be called jc42.
 
+config SENSORS_SPD5118
+	tristate "JEDEC SPD5118 compliant memory SPD hub"
+	depends on I2C
+	select REGMAP_I2C
+	help
+	  If you say yes here, you get support for JEDEC JC42.4 compliant
+
+	  This driver can also be built as a module. If so, the module
+	  will be called spd5118.
+
 config SENSORS_POWR1220
 	tristate "Lattice POWR1220 Power Monitoring"
 	depends on I2C
--- linux-6.2/drivers/hwmon/spd5118.c.vanilla	2023-03-26 22:07:06.816531830 +0200
+++ linux-6.2/drivers/hwmon/spd5118.c	2023-03-28 20:31:50.848798609 +0200
@@ -0,0 +1,348 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * spd5118.c - driver for Jedec 5118 compliant temperature sensors
+ *
+ * Copyright (c) 2023 Ren√© Rebe ExactCODE GmbH
+ *
+ * Inspired by ee1004.c and jc42.c.
+ *
+ * SPD5118 compliant temperature sensors are typically used on memory modules.
+ */
+
+#include <linux/bitops.h>
+#include <linux/bitfield.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/jiffies.h>
+#include <linux/i2c.h>
+#include <linux/hwmon.h>
+#include <linux/err.h>
+#include <linux/mutex.h>
+#include <linux/of.h>
+#include <linux/regmap.h>
+
+#define MAX_SPD_PAGE_SIZE_SPD5	128
+#define MAX_SPD_SIZE		(SPD_PAGE_LEN * SPD_SN_LEN)
+#define SPD_HUB_MEMREG(addr)	((u8)(0x80 | (addr)))
+#define SPD5_MR0		0x00
+#define SPD5_MR11		0x0B
+#define SPD5_MEMREG_REG(addr)	((u8)((~0x80) & (addr)))
+#define SPD5_MR0_SPD5_HUB_DEV	0x51
+
+/* Addresses to scan */
+static const unsigned short normal_i2c[] = {
+	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, I2C_CLIENT_END };
+
+/* SPD5118 registers. All registers are 16 bit. */
+#define SPD5118_REG_TYPE		(0x00)
+#define SPD5118_REG_VENDOR		(0x03)
+#define SPD5118_REG_TEMP		(0x31)
+
+#define SPD5118_NUM_PAGES		8
+#define SPD5118_PAGE_SIZE		128
+#define SPD5118_PAGE_SHIFT		7
+#define SPD5118_EEPROM_SIZE		(SPD5118_PAGE_SIZE * SPD5118_NUM_PAGES)
+
+
+/* Each client has this additional data */
+struct spd5118_data {
+	struct mutex	update_lock;	/* protect register access */
+	struct regmap	*regmap;
+	int current_page;
+};
+
+static long spd5118_temp_from_reg(s32 reg)
+{
+	reg = sign_extend32(reg >> 2, 11);
+
+	return reg * 1000 / 4;
+}
+
+static int spd5118_read(struct device *dev, enum hwmon_sensor_types type,
+		     u32 attr, int channel, long *val)
+{
+	struct spd5118_data *data = dev_get_drvdata(dev);
+	int ret, regval;
+
+	mutex_lock(&data->update_lock);
+
+	switch (attr) {
+	case hwmon_temp_input:
+		ret = regmap_read(data->regmap, SPD5118_REG_TEMP, &regval);
+		if (ret)
+			break;
+
+		*val = spd5118_temp_from_reg(regval);
+		break;
+	default:
+		ret = -EOPNOTSUPP;
+		break;
+	}
+
+	mutex_unlock(&data->update_lock);
+
+	return ret;
+}
+
+static int spd5118_write(struct device *dev, enum hwmon_sensor_types type,
+		      u32 attr, int channel, long val)
+{
+	struct spd5118_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	mutex_lock(&data->update_lock);
+
+	switch (attr) {
+	default:
+		ret = -EOPNOTSUPP;
+		break;
+	}
+
+	mutex_unlock(&data->update_lock);
+
+	return ret;
+}
+
+static umode_t spd5118_is_visible(const void *_data, enum hwmon_sensor_types type,
+			       u32 attr, int channel)
+{
+	umode_t mode = 0444;
+
+	switch (attr) {
+	case hwmon_temp_input:
+		break;
+	default:
+		mode = 0;
+		break;
+	}
+	return mode;
+}
+
+static int spd5118_set_current_page(struct i2c_client *client, int page)
+{
+	struct device *dev = &client->dev;
+	struct spd5118_data *data = dev_get_drvdata(dev);
+	int ret;
+
+	if (page == data->current_page)
+		return 0;
+
+	ret = i2c_smbus_write_byte_data(client, SPD5_MEMREG_REG(SPD5_MR11), page);
+	if (ret < 0) {
+		dev_err(dev, "Failed to select page %d (%d)\n", page, ret);
+		return ret;
+	}
+
+	dev_dbg(dev, "Selected page %d\n", page);
+	data->current_page = page;
+
+	return 0;
+}
+
+static ssize_t spd5118_eeprom_read(struct i2c_client *client, char *buf,
+				  unsigned int offset, size_t count)
+{
+	int status, page;
+
+	page = offset >> SPD5118_PAGE_SHIFT;
+	offset &= (1 << SPD5118_PAGE_SHIFT) - 1;
+
+	status = spd5118_set_current_page(client, page);
+	if (status)
+		return status;
+
+	/* Can't cross page boundaries */
+	if (offset + count > SPD5118_PAGE_SIZE)
+		count = SPD5118_PAGE_SIZE - offset;
+
+	if (count > I2C_SMBUS_BLOCK_MAX)
+		count = I2C_SMBUS_BLOCK_MAX;
+
+	return i2c_smbus_read_i2c_block_data_or_emulated(client, 0x80 + offset, count, buf);
+}
+
+static ssize_t eeprom_read(struct file *filp, struct kobject *kobj,
+			   struct bin_attribute *bin_attr,
+			   char *buf, loff_t off, size_t count)
+{
+	struct i2c_client *client = kobj_to_i2c_client(kobj);
+	struct device *dev = &client->dev;
+	struct spd5118_data *data = dev_get_drvdata(dev);
+	size_t requested = count;
+	int ret = 0;
+
+	mutex_lock(&data->update_lock);
+
+	while (count) {
+		ret = spd5118_eeprom_read(client, buf, off, count);
+		if (ret < 0)
+			goto out;
+
+		buf += ret;
+		off += ret;
+		count -= ret;
+	}
+out:
+
+	mutex_unlock(&data->update_lock);
+
+	return ret < 0 ? ret : requested;
+}
+
+static BIN_ATTR_RO(eeprom, SPD5118_EEPROM_SIZE);
+
+static struct bin_attribute *spd5118_attrs[] = {
+	&bin_attr_eeprom,
+	NULL
+};
+
+BIN_ATTRIBUTE_GROUPS(spd5118);
+
+/* Return 0 if detection is successful, -ENODEV otherwise */
+static int spd5118_detect(struct i2c_client *client, struct i2c_board_info *info)
+{
+	struct i2c_adapter *adapter = client->adapter;
+	int cap, vendor;
+
+	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA |
+				     I2C_FUNC_SMBUS_WORD_DATA))
+		return -ENODEV;
+
+	cap = i2c_smbus_read_byte_data(client, SPD5118_REG_TYPE);
+	vendor = i2c_smbus_read_byte_data(client, SPD5118_REG_VENDOR);
+
+	if (cap <= 0 || vendor <= 0)
+		return -ENODEV;
+
+	strscpy(info->type, "spd5118", I2C_NAME_SIZE);
+	return 0;
+}
+
+static const struct hwmon_channel_info *spd5118_info[] = {
+	HWMON_CHANNEL_INFO(chip,
+			   HWMON_C_REGISTER_TZ | HWMON_C_UPDATE_INTERVAL),
+	HWMON_CHANNEL_INFO(temp,
+			   HWMON_T_INPUT),
+	NULL
+};
+
+static const struct hwmon_ops spd5118_hwmon_ops = {
+	.is_visible = spd5118_is_visible,
+	.read = spd5118_read,
+	.write = spd5118_write,
+};
+
+static const struct hwmon_chip_info spd5118_chip_info = {
+	.ops = &spd5118_hwmon_ops,
+	.info = spd5118_info,
+};
+
+static bool spd5118_readable_reg(struct device *dev, unsigned int reg)
+{
+	return (reg >= SPD5118_REG_TYPE && reg <= SPD5118_REG_TEMP + 1);
+}
+
+static bool spd5118_writeable_reg(struct device *dev, unsigned int reg)
+{
+	return 0;
+}
+
+static bool spd5118_volatile_reg(struct device *dev, unsigned int reg)
+{
+	return reg == SPD5118_REG_TEMP;
+}
+
+static const struct regmap_config spd5118_regmap_config = {
+	.reg_bits = 8,
+	.val_bits = 16,
+	.val_format_endian = REGMAP_ENDIAN_LITTLE,
+	.max_register = SPD5118_REG_TEMP,
+	.writeable_reg = spd5118_writeable_reg,
+	.readable_reg = spd5118_readable_reg,
+	.volatile_reg = spd5118_volatile_reg,
+	.cache_type = REGCACHE_RBTREE,
+};
+
+static int spd5118_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct device *hwmon_dev;
+	unsigned int typ, cap, vendor, temp, conf;
+	struct spd5118_data *data;
+	int ret;
+
+	data = devm_kzalloc(dev, sizeof(struct spd5118_data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	i2c_set_clientdata(client, data);
+
+	data->current_page = -1;
+
+	ret = spd5118_set_current_page(client, 0);
+
+	typ = i2c_smbus_read_word_swapped(client, SPD5_MEMREG_REG(SPD5_MR0));
+	if (typ != 0x5118) {
+		return -ENODEV;
+	}
+	vendor = i2c_smbus_read_word_swapped(client, SPD5_MEMREG_REG(0x3));
+	cap = i2c_smbus_read_byte_data(client, SPD5_MEMREG_REG(0x5));
+	conf = i2c_smbus_read_byte_data(client, SPD5_MEMREG_REG(0x1a));
+	temp = i2c_smbus_read_word_data(client, SPD5_MEMREG_REG(0x31));
+
+	ret = i2c_smbus_write_byte_data(client, SPD5_MEMREG_REG(SPD5_MR11), 0);
+
+	data->regmap = devm_regmap_init_i2c(client, &spd5118_regmap_config);
+	if (IS_ERR(data->regmap))
+		return PTR_ERR(data->regmap);
+
+	mutex_init(&data->update_lock);
+
+	ret = regmap_read(data->regmap, SPD5118_REG_TYPE, &cap);
+	if (ret)
+		return ret;
+
+	hwmon_dev = devm_hwmon_device_register_with_info(dev, "spd5118",
+							 data, &spd5118_chip_info,
+							 NULL);
+	return PTR_ERR_OR_ZERO(hwmon_dev);
+}
+
+static void spd5118_remove(struct i2c_client *client)
+{
+}
+
+static const struct i2c_device_id spd5118_id[] = {
+	{ "spd5118", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, spd5118_id);
+
+#ifdef CONFIG_OF
+static const struct of_device_id spd5118_of_ids[] = {
+	{ .compatible = "jedec,spd5118", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, spd5118_of_ids);
+#endif
+
+static struct i2c_driver spd5118_driver = {
+	.class		= I2C_CLASS_SPD | I2C_CLASS_HWMON,
+	.driver = {
+		.name	= "spd5118",
+		.dev_groups = spd5118_groups,
+		.of_match_table = of_match_ptr(spd5118_of_ids),
+	},
+	.probe_new	= spd5118_probe,
+	.remove		= spd5118_remove,
+	.id_table	= spd5118_id,
+	.detect		= spd5118_detect,
+	.address_list	= normal_i2c,
+};
+
+module_i2c_driver(spd5118_driver);
+
+MODULE_AUTHOR("Ren√© Rebe <rene@exactcode.de>");
+MODULE_DESCRIPTION("SPD 5118 driver");
+MODULE_LICENSE("GPL");


Add device tree bindings for the SPD hub present in DDR5 modules.

Signed-off-by: Hristo Venev <hristo@venev.name>
---
 .../bindings/hwmon/jedec,spd5118.yaml         | 42 +++++++++++++++++++
 1 file changed, 42 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/hwmon/jedec,spd5118.yaml

diff --git a/Documentation/devicetree/bindings/hwmon/jedec,spd5118.yaml b/Documentation/devicetree/bindings/hwmon/jedec,spd5118.yaml
new file mode 100644
index 000000000000..9410ee0cb6b6
--- /dev/null
+++ b/Documentation/devicetree/bindings/hwmon/jedec,spd5118.yaml
@@ -0,0 +1,42 @@
+# SPDX-License-Identifier: GPL-2.0-only or BSD-2-Clause
+%YAML 1.2
+---
+$id: http://devicetree.org/schemas/hwmon/jedec,spd5118.yaml#
+$schema: http://devicetree.org/meta-schemas/core.yaml#
+
+title: JEDEC JESD300-5B compatible DDR5 SPD hub
+
+maintainers: []
+
+select:
+  properties:
+    compatible:
+      const: jedec,spd5118
+
+  required:
+    - compatible
+
+properties:
+  compatible:
+    const: jedec,spd5118
+
+  reg:
+    maxItems: 1
+
+required:
+  - compatible
+  - reg
+
+additionalProperties: false
+
+examples:
+  - |
+    i2c {
+        #address-cells = <1>;
+        #size-cells = <0>;
+
+        temp-sensor@1a {
+            compatible = "jedec,spd5118";
+            reg = <0x51>;
+        };
+    };
-- 
2.40.1

As some of the registers are 8-bit instead of 16-bit, switch from regmap
to direct smbus access.

In SPD5118 the alarms are sticky and do not support hysteresis. Instead,
the alarm must be cleared manually by writing 0 to the corresponding
file. Note that writing to registers is disabled by default, but can be
enabled with module parameters.

The JEDEC JEP106 vendor ID is presented as described in the standard,
i.e. as a single odd-parity byte with zero or more (up to 126?) 7F
prefix bytes. This is different from the representation used since DDR3,
which is two odd-parity bytes.

The revision consists of a major and a minor component, where the former
is 1-indexed. The reserved bits are ignored.

Signed-off-by: Hristo Venev <hristo@venev.name>
---
 drivers/hwmon/Kconfig   |   3 +-
 drivers/hwmon/spd5118.c | 419 ++++++++++++++++++++++++++++++----------
 2 files changed, 315 insertions(+), 107 deletions(-)

diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index c66c74ea691d..ded4e4b357e5 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -833,7 +833,8 @@ config SENSORS_SPD5118
 	depends on I2C
 	select REGMAP_I2C
 	help
-	  If you say yes here, you get support for JEDEC JC42.4 compliant
+	  If you say yes here, you get support for JEDEC JESD300-5B compliant
+	  temperature sensors, which are present on all DDR5 memory modules.
 
 	  This driver can also be built as a module. If so, the module
 	  will be called spd5118.
diff --git a/drivers/hwmon/spd5118.c b/drivers/hwmon/spd5118.c
index 5092e4f2113b..5a6c1a0f82a8 100644
--- a/drivers/hwmon/spd5118.c
+++ b/drivers/hwmon/spd5118.c
@@ -20,105 +20,334 @@
 #include <linux/err.h>
 #include <linux/mutex.h>
 #include <linux/of.h>
-#include <linux/regmap.h>
-
-#define MAX_SPD_PAGE_SIZE_SPD5	128
-#define MAX_SPD_SIZE		(SPD_PAGE_LEN * SPD_SN_LEN)
-#define SPD_HUB_MEMREG(addr)	((u8)(0x80 | (addr)))
-#define SPD5_MR0		0x00
-#define SPD5_MR11		0x0B
-#define SPD5_MEMREG_REG(addr)	((u8)((~0x80) & (addr)))
-#define SPD5_MR0_SPD5_HUB_DEV	0x51
 
 /* Addresses to scan */
 static const unsigned short normal_i2c[] = {
 	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, I2C_CLIENT_END };
 
-/* SPD5118 registers. All registers are 16 bit. */
-#define SPD5118_REG_TYPE		(0x00)
-#define SPD5118_REG_VENDOR		(0x03)
-#define SPD5118_REG_TEMP		(0x31)
+/* SPD5118 registers. */
+#define SPD5118_REG_TYPE		(0x00) /* MR0:MR1 */
+#define SPD5118_REG_REVISION		(0x02) /* MR2 */
+#define SPD5118_REG_VENDOR		(0x03) /* MR3:MR4 */
+#define SPD5118_REG_I2C_LEGACY_MODE	(0x0B) /* MR11 */
+#define SPD5118_REG_TEMP_CLR		(0x13) /* MR19 */
+#define SPD5118_REG_TEMP_MAX		(0x1c) /* MR28:MR29 */
+#define SPD5118_REG_TEMP_MIN		(0x1e) /* MR30:MR31 */
+#define SPD5118_REG_TEMP_CRIT		(0x20) /* MR32:MR33 */
+#define SPD5118_REG_TEMP_LCRIT		(0x22) /* MR34:MR35 */
+#define SPD5118_REG_TEMP		(0x31) /* MR49:MR50 */
+#define SPD5118_REG_TEMP_STATUS		(0x33) /* MR51 */
+
+#define SPD5118_TEMP_STATUS_HIGH	(1 << 0)
+#define SPD5118_TEMP_STATUS_LOW		(1 << 1)
+#define SPD5118_TEMP_STATUS_CRIT	(1 << 2)
+#define SPD5118_TEMP_STATUS_LCRIT	(1 << 3)
+
+#define SPD5118_TEMP_CLR_HIGH		(1 << 0)
+#define SPD5118_TEMP_CLR_LOW		(1 << 1)
+#define SPD5118_TEMP_CLR_CRIT		(1 << 2)
+#define SPD5118_TEMP_CLR_LCRIT		(1 << 3)
 
 #define SPD5118_NUM_PAGES		8
 #define SPD5118_PAGE_SIZE		128
 #define SPD5118_PAGE_SHIFT		7
+#define SPD5118_EEPROM_BASE		0x80
 #define SPD5118_EEPROM_SIZE		(SPD5118_PAGE_SIZE * SPD5118_NUM_PAGES)
 
+/* Temperature unit in millicelsius */
+#define SPD5118_TEMP_UNIT (1000 / 4)
+/* Representable temperature range in millicelsius */
+#define SPD5118_TEMP_RANGE_MIN -256000
+#define SPD5118_TEMP_RANGE_MAX 255750
+
+
+static bool enable_temp_write;
+module_param(enable_temp_write, bool, false);
+MODULE_PARM_DESC(enable_temp_write, "Enable setting temperature thresholds");
+
+static bool enable_alarm_write;
+module_param(enable_alarm_write, bool, false);
+MODULE_PARM_DESC(enable_alarm_write, "Enable resetting temperature alarms");
+
 
 /* Each client has this additional data */
 struct spd5118_data {
-	struct mutex	update_lock;	/* protect register access */
-	struct regmap	*regmap;
+	struct mutex update_lock;	/* protect register access */
 	int current_page;
+	u16 vendor;
+	u8 revision;
 };
 
-static long spd5118_temp_from_reg(s32 reg)
+static bool spd5118_vendor_valid(u16 reg)
 {
-	reg = sign_extend32(reg >> 2, 11);
+	u8 pfx = reg & 0xff;
+	u8 id = reg >> 8;
+
+	if (!__builtin_parity(pfx) || !__builtin_parity(id))
+		return false;
+	id &= 0x7f;
+	if (id == 0 || id == 0x7f)
+		return false;
+	return true;
+}
 
-	return reg * 1000 / 4;
+static int spd5118_temp_from_reg(u16 reg)
+{
+	reg = sign_extend32(reg >> 2, 11);
+	return reg * SPD5118_TEMP_UNIT;
 }
 
-static int spd5118_read(struct device *dev, enum hwmon_sensor_types type,
-		     u32 attr, int channel, long *val)
+static u16 spd5118_temp_to_reg(int temp)
 {
-	struct spd5118_data *data = dev_get_drvdata(dev);
-	int ret, regval;
+	temp = clamp_val(temp, SPD5118_TEMP_RANGE_MIN, SPD5118_TEMP_RANGE_MAX);
+	return ((temp / SPD5118_TEMP_UNIT) & 0x7ff) << 2;
+}
 
-	mutex_lock(&data->update_lock);
+static int spd5118_read_temp(struct i2c_client *client, u32 attr, long *val)
+{
+	struct spd5118_data *data = i2c_get_clientdata(client);
+	int reg, regval;
 
 	switch (attr) {
 	case hwmon_temp_input:
-		ret = regmap_read(data->regmap, SPD5118_REG_TEMP, &regval);
-		if (ret)
-			break;
-
-		*val = spd5118_temp_from_reg(regval);
+		reg = SPD5118_REG_TEMP;
 		break;
-	default:
-		ret = -EOPNOTSUPP;
+	case hwmon_temp_max:
+		reg = SPD5118_REG_TEMP_MAX;
+		break;
+	case hwmon_temp_min:
+		reg = SPD5118_REG_TEMP_MIN;
 		break;
+	case hwmon_temp_crit:
+		reg = SPD5118_REG_TEMP_CRIT;
+		break;
+	case hwmon_temp_lcrit:
+		reg = SPD5118_REG_TEMP_LCRIT;
+		break;
+	default:
+		return -EOPNOTSUPP;
 	}
 
+	mutex_lock(&data->update_lock);
+	regval = i2c_smbus_read_word_data(client, reg);
 	mutex_unlock(&data->update_lock);
+	if (regval < 0)
+		return regval;
 
-	return ret;
+	*val = spd5118_temp_from_reg(regval);
+	return 0;
 }
 
-static int spd5118_write(struct device *dev, enum hwmon_sensor_types type,
-		      u32 attr, int channel, long val)
+static int spd5118_write_temp(struct i2c_client *client, u32 attr, long val)
 {
-	struct spd5118_data *data = dev_get_drvdata(dev);
-	int ret;
+	struct spd5118_data *data = i2c_get_clientdata(client);
+	int reg, ret;
+	u16 regval;
 
-	mutex_lock(&data->update_lock);
+	if (WARN_ON(!enable_temp_write))
+		return -EOPNOTSUPP;
 
 	switch (attr) {
+	case hwmon_temp_max:
+		reg = SPD5118_REG_TEMP_MAX;
+		break;
+	case hwmon_temp_min:
+		reg = SPD5118_REG_TEMP_MIN;
+		break;
+	case hwmon_temp_crit:
+		reg = SPD5118_REG_TEMP_CRIT;
+		break;
+	case hwmon_temp_lcrit:
+		reg = SPD5118_REG_TEMP_LCRIT;
+		break;
 	default:
-		ret = -EOPNOTSUPP;
+		return -EOPNOTSUPP;
+	}
+
+	regval = spd5118_temp_to_reg(val);
+	mutex_lock(&data->update_lock);
+	ret = i2c_smbus_write_word_data(client, reg, regval);
+	mutex_unlock(&data->update_lock);
+	return ret;
+}
+
+static int spd5118_read_alarm(struct i2c_client *client, u32 attr, long *val)
+{
+	struct spd5118_data *data = i2c_get_clientdata(client);
+	int mask, regval;
+
+	switch (attr) {
+	case hwmon_temp_max_alarm:
+		mask = SPD5118_TEMP_STATUS_HIGH;
+		break;
+	case hwmon_temp_min_alarm:
+		mask = SPD5118_TEMP_STATUS_LOW;
 		break;
+	case hwmon_temp_crit_alarm:
+		mask = SPD5118_TEMP_STATUS_CRIT;
+		break;
+	case hwmon_temp_lcrit_alarm:
+		mask = SPD5118_TEMP_STATUS_LCRIT;
+		break;
+	default:
+		return -EOPNOTSUPP;
 	}
 
+	mutex_lock(&data->update_lock);
+	regval = i2c_smbus_read_byte_data(client, SPD5118_REG_TEMP_STATUS);
 	mutex_unlock(&data->update_lock);
+	if (regval < 0)
+		return regval;
+	*val = !!(regval & mask);
+	return 0;
+}
+
+static int spd5118_clear_alarm(struct i2c_client *client, u32 attr)
+{
+	struct spd5118_data *data = i2c_get_clientdata(client);
+	int ret;
+	u8 regval;
 
+	if (WARN_ON(!enable_alarm_write))
+		return -EOPNOTSUPP;
+
+	switch (attr) {
+	case hwmon_temp_max_alarm:
+		regval = SPD5118_TEMP_CLR_HIGH;
+		break;
+	case hwmon_temp_min_alarm:
+		regval = SPD5118_TEMP_CLR_LOW;
+		break;
+	case hwmon_temp_crit_alarm:
+		regval = SPD5118_TEMP_CLR_CRIT;
+		break;
+	case hwmon_temp_lcrit_alarm:
+		regval = SPD5118_TEMP_CLR_LCRIT;
+		break;
+	default:
+		return -EOPNOTSUPP;
+	}
+
+	mutex_lock(&data->update_lock);
+	ret = i2c_smbus_write_byte_data(client, SPD5118_REG_TEMP_CLR, regval);
+	mutex_unlock(&data->update_lock);
 	return ret;
 }
 
+static int spd5118_read(struct device *dev, enum hwmon_sensor_types type,
+		     u32 attr, int channel, long *val)
+{
+	struct i2c_client *client = dev_get_drvdata(dev);
+
+	if (type != hwmon_temp)
+		return -EOPNOTSUPP;
+
+	switch (attr) {
+	case hwmon_temp_input:
+	case hwmon_temp_max:
+	case hwmon_temp_min:
+	case hwmon_temp_crit:
+	case hwmon_temp_lcrit:
+		return spd5118_read_temp(client, attr, val);
+	case hwmon_temp_max_alarm:
+	case hwmon_temp_min_alarm:
+	case hwmon_temp_crit_alarm:
+	case hwmon_temp_lcrit_alarm:
+		return spd5118_read_alarm(client, attr, val);
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
+static int spd5118_write(struct device *dev, enum hwmon_sensor_types type,
+		      u32 attr, int channel, long val)
+{
+	struct i2c_client *client = dev_get_drvdata(dev);
+
+	if (type != hwmon_temp)
+		return -EOPNOTSUPP;
+
+	switch (attr) {
+	case hwmon_temp_max:
+	case hwmon_temp_min:
+	case hwmon_temp_crit:
+	case hwmon_temp_lcrit:
+		return spd5118_write_temp(client, attr, val);
+	case hwmon_temp_max_alarm:
+	case hwmon_temp_min_alarm:
+	case hwmon_temp_crit_alarm:
+	case hwmon_temp_lcrit_alarm:
+		if (val)
+			return -EINVAL;
+		return spd5118_clear_alarm(client, attr);
+	default:
+		return -EOPNOTSUPP;
+	}
+}
+
 static umode_t spd5118_is_visible(const void *_data, enum hwmon_sensor_types type,
 			       u32 attr, int channel)
 {
-	umode_t mode = 0444;
+	if (type != hwmon_temp)
+		return 0;
 
 	switch (attr) {
 	case hwmon_temp_input:
-		break;
+		return 0444;
+	case hwmon_temp_min:
+	case hwmon_temp_max:
+	case hwmon_temp_crit:
+	case hwmon_temp_lcrit:
+		return enable_temp_write ? 0644 : 0444;
+	case hwmon_temp_min_alarm:
+	case hwmon_temp_max_alarm:
+	case hwmon_temp_crit_alarm:
+	case hwmon_temp_lcrit_alarm:
+		return enable_alarm_write ? 0644 : 0444;
 	default:
-		mode = 0;
-		break;
+		return 0;
 	}
-	return mode;
 }
 
+static ssize_t
+revision_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct spd5118_data *data = dev_get_drvdata(dev);
+	/* From JESD300-5B
+	 *   MR2 bits [5:4]: Major revision, 1..4
+	 *   MR2 bits [3:1]: Minor revision, 0..8? Probably a typo.
+	 */
+	return sprintf(buf, "%d.%d\n", 1 + ((data->revision >> 4) & 3), (data->revision >> 1) & 7);
+}
+
+static DEVICE_ATTR_RO(revision);
+
+static ssize_t
+pmic_vendor_id_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct spd5118_data *data = dev_get_drvdata(dev);
+	u8 pfx = data->vendor & 0x7f;
+	u8 id = (data->vendor >> 8) & 0x7f;
+	int n = 0;
+
+	while (pfx--) {
+		n += 3;
+		*buf++ = '7';
+		*buf++ = 'F';
+		*buf++ = ' ';
+	}
+	/* Low byte is number of 7F prefixes of the JEP106 ID */
+	return n + sprintf(buf, "%02X\n", id);
+}
+
+static DEVICE_ATTR_RO(pmic_vendor_id);
+
+static struct attribute *spd5118_attrs[] = {
+	&dev_attr_revision.attr,
+	&dev_attr_pmic_vendor_id.attr,
+	NULL,
+};
+
 static int spd5118_set_current_page(struct i2c_client *client, int page)
 {
 	struct device *dev = &client->dev;
@@ -128,7 +357,7 @@ static int spd5118_set_current_page(struct i2c_client *client, int page)
 	if (page == data->current_page)
 		return 0;
 
-	ret = i2c_smbus_write_byte_data(client, SPD5_MEMREG_REG(SPD5_MR11), page);
+	ret = i2c_smbus_write_byte_data(client, SPD5118_REG_I2C_LEGACY_MODE, page);
 	if (ret < 0) {
 		dev_err(dev, "Failed to select page %d (%d)\n", page, ret);
 		return ret;
@@ -156,10 +385,7 @@ static ssize_t spd5118_eeprom_read(struct i2c_client *client, char *buf,
 	if (offset + count > SPD5118_PAGE_SIZE)
 		count = SPD5118_PAGE_SIZE - offset;
 
-	if (count > I2C_SMBUS_BLOCK_MAX)
-		count = I2C_SMBUS_BLOCK_MAX;
-
-	return i2c_smbus_read_i2c_block_data_or_emulated(client, 0x80 + offset, count, buf);
+	return i2c_smbus_read_i2c_block_data_or_emulated(client, SPD5118_EEPROM_BASE + offset, count, buf);
 }
 
 static ssize_t eeprom_read(struct file *filp, struct kobject *kobj,
@@ -192,12 +418,20 @@ static ssize_t eeprom_read(struct file *filp, struct kobject *kobj,
 
 static BIN_ATTR_RO(eeprom, SPD5118_EEPROM_SIZE);
 
-static struct bin_attribute *spd5118_attrs[] = {
+static struct bin_attribute *spd5118_bin_attrs[] = {
 	&bin_attr_eeprom,
 	NULL
 };
 
-BIN_ATTRIBUTE_GROUPS(spd5118);
+static const struct attribute_group spd5118_attr_group = {
+	.attrs = spd5118_attrs,
+	.bin_attrs = spd5118_bin_attrs,
+};
+
+static const struct attribute_group *spd5118_groups[] = {
+	&spd5118_attr_group,
+	NULL,
+};
 
 /* Return 0 if detection is successful, -ENODEV otherwise */
 static int spd5118_detect(struct i2c_client *client, struct i2c_board_info *info)
@@ -209,10 +443,12 @@ static int spd5118_detect(struct i2c_client *client, struct i2c_board_info *info
 				     I2C_FUNC_SMBUS_WORD_DATA))
 		return -ENODEV;
 
-	cap = i2c_smbus_read_byte_data(client, SPD5118_REG_TYPE);
-	vendor = i2c_smbus_read_byte_data(client, SPD5118_REG_VENDOR);
+	cap = i2c_smbus_read_word_swapped(client, SPD5118_REG_TYPE);
+	if (cap != 0x5118)
+		return -ENODEV;
 
-	if (cap <= 0 || vendor <= 0)
+	vendor = i2c_smbus_read_word_data(client, SPD5118_REG_VENDOR);
+	if (vendor < 0 || !spd5118_vendor_valid(vendor))
 		return -ENODEV;
 
 	strscpy(info->type, "spd5118", I2C_NAME_SIZE);
@@ -221,9 +457,13 @@ static int spd5118_detect(struct i2c_client *client, struct i2c_board_info *info
 
 static const struct hwmon_channel_info *spd5118_info[] = {
 	HWMON_CHANNEL_INFO(chip,
-			   HWMON_C_REGISTER_TZ | HWMON_C_UPDATE_INTERVAL),
+			   HWMON_C_REGISTER_TZ),
 	HWMON_CHANNEL_INFO(temp,
-			   HWMON_T_INPUT),
+			   HWMON_T_INPUT |
+			   HWMON_T_LCRIT | HWMON_T_LCRIT_ALARM |
+			   HWMON_T_MIN | HWMON_T_MIN_ALARM |
+			   HWMON_T_MAX | HWMON_T_MAX_ALARM |
+			   HWMON_T_CRIT | HWMON_T_CRIT_ALARM),
 	NULL
 };
 
@@ -238,73 +478,40 @@ static const struct hwmon_chip_info spd5118_chip_info = {
 	.info = spd5118_info,
 };
 
-static bool spd5118_readable_reg(struct device *dev, unsigned int reg)
-{
-	return (reg >= SPD5118_REG_TYPE && reg <= SPD5118_REG_TEMP + 1);
-}
-
-static bool spd5118_writeable_reg(struct device *dev, unsigned int reg)
-{
-	return 0;
-}
-
-static bool spd5118_volatile_reg(struct device *dev, unsigned int reg)
-{
-	return reg == SPD5118_REG_TEMP;
-}
-
-static const struct regmap_config spd5118_regmap_config = {
-	.reg_bits = 8,
-	.val_bits = 16,
-	.val_format_endian = REGMAP_ENDIAN_LITTLE,
-	.max_register = SPD5118_REG_TEMP,
-	.writeable_reg = spd5118_writeable_reg,
-	.readable_reg = spd5118_readable_reg,
-	.volatile_reg = spd5118_volatile_reg,
-	.cache_type = REGCACHE_RBTREE,
-};
-
 static int spd5118_probe(struct i2c_client *client)
 {
 	struct device *dev = &client->dev;
 	struct device *hwmon_dev;
-	unsigned int typ, cap, vendor, temp, conf;
+	unsigned int typ, revision, vendor;
 	struct spd5118_data *data;
-	int ret;
 
-	data = devm_kzalloc(dev, sizeof(struct spd5118_data), GFP_KERNEL);
-	if (!data)
-		return -ENOMEM;
-
-	i2c_set_clientdata(client, data);
-
-	data->current_page = -1;
-
-	ret = spd5118_set_current_page(client, 0);
-
-	typ = i2c_smbus_read_word_swapped(client, SPD5_MEMREG_REG(SPD5_MR0));
+	typ = i2c_smbus_read_word_swapped(client, SPD5118_REG_TYPE);
 	if (typ != 0x5118) {
+		dev_dbg(dev, "Device type incorrect (%d)\n", typ);
 		return -ENODEV;
 	}
-	vendor = i2c_smbus_read_word_swapped(client, SPD5_MEMREG_REG(0x3));
-	cap = i2c_smbus_read_byte_data(client, SPD5_MEMREG_REG(0x5));
-	conf = i2c_smbus_read_byte_data(client, SPD5_MEMREG_REG(0x1a));
-	temp = i2c_smbus_read_word_data(client, SPD5_MEMREG_REG(0x31));
 
-	ret = i2c_smbus_write_byte_data(client, SPD5_MEMREG_REG(SPD5_MR11), 0);
+	revision = i2c_smbus_read_byte_data(client, SPD5118_REG_REVISION);
+	if (revision < 0)
+		return -ENODEV;
 
-	data->regmap = devm_regmap_init_i2c(client, &spd5118_regmap_config);
-	if (IS_ERR(data->regmap))
-		return PTR_ERR(data->regmap);
+	vendor = i2c_smbus_read_word_data(client, SPD5118_REG_VENDOR);
+	if (vendor < 0)
+		return -ENODEV;
 
-	mutex_init(&data->update_lock);
+	data = devm_kzalloc(dev, sizeof(struct spd5118_data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
 
-	ret = regmap_read(data->regmap, SPD5118_REG_TYPE, &cap);
-	if (ret)
-		return ret;
+	i2c_set_clientdata(client, data);
+
+	mutex_init(&data->update_lock);
+	data->current_page = -1;
+	data->vendor = vendor;
+	data->revision = revision;
 
 	hwmon_dev = devm_hwmon_device_register_with_info(dev, "spd5118",
-							 data, &spd5118_chip_info,
+							 client, &spd5118_chip_info,
 							 NULL);
 	return PTR_ERR_OR_ZERO(hwmon_dev);
 }
-- 
2.40.1

